local states = { "state_mayo", "state_mustard", "state_ketchup"}
local idle_animations = {
	["state_mayo"] = "green_idle",
	["state_mustard"] = "yellow_idle",
	["state_ketchup"] = "blue_idle"
}
local eat_animations = {
	["state_mayo"] = "green_eat",
	["state_mustard"] = "yellow_eat",
	["state_ketchup"] = "blue_eat"
}

local y_offset = 60

local function animation_idle(self)
	msg.post(self.current_state .. "#player_sprite", "play_animation", {id = hash(idle_animations[self.current_state])})
end

local function init_states(self)
	for i, state in ipairs(states) do
		go.set(state .. "#player_sprite", "tint.w", 0)
	end
end

local function set_state(self, new_state)
	-- Performs smooth transition between states
	animation_idle(self)
	go.animate(self.current_state .. "#player_sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.25)
	go.animate(new_state .. "#player_sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.25)
	msg.post("player#transition_sound", "play_sound")

	self.current_state = new_state
end

local function switch_state(self)
	if self.current_state == "state_mayo" then
		set_state(self, "state_mustard")
	elseif self.current_state == "state_mustard" then
		set_state(self, "state_ketchup")
	else
		set_state(self, "state_mayo")
	end
end

local function set_lane(self, lane, animate)
	if lane > 0 and lane < self.lanes + 1 then
		self.lane = lane

		local pos = go.get_position()
		pos.x = (lane - 1) * self.lane_width + (self.lane_width / 2)
		pos.y = y_offset

		for i, state in ipairs(states) do
			if animate then
				go.animate(state, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_INSINE, 0.25)
				msg.post("player#move_sound", "play_sound")
			else
				go.set_position(pos, state)
			end
		end
	end
end

function init(self)
	self.current_state = "state_mayo"

	self.lanes = 4
	self.lane_width = tonumber(sys.get_config("display.width"))/ self.lanes
	
	-- this tells the engine to send input to on_input() in this script
	msg.post(".", "acquire_input_focus")
	init_states(self)
	set_state(self,  "state_mustard")
	set_lane(self, 1, false)
end

function final(self)
	-- Return input focus when the object is deleted
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("animation_done") then
		animation_idle(self)
	elseif message_id == hash("collision") then
		if self.current_state == "state_" .. message.form then
			msg.post("player#eat_sound", "play_sound")
			msg.post("/main#script", "add_score", { points = message.points })
			msg.post(self.current_state .. "#player_sprite", "play_animation", {id = hash(eat_animations[self.current_state])})
		else
			msg.post("/main#script", "wrong_collision")
			msg.post(self.current_state .. "#player_sprite", "play_animation", {id = hash("game_over")})
		end
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == hash("mayo") then
			set_state(self, "state_mayo")
		elseif action_id == hash("mustard") then
			set_state(self, "state_mustard")
		elseif action_id == hash("ketchup") then
			set_state(self, "state_ketchup")
		elseif (action_id == hash("click") and action.pressed) then
			-- Ugly way to restrict click listening to where player is
			if action.y <= 100 then
				switch_state(self)
			end
		elseif action_id == hash("left") then
			set_lane(self, self.lane - 1, true)
		elseif action_id == hash("right") then
			set_lane(self, self.lane + 1, true)
		end
	end
end
